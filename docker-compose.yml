# https://gompro.postype.com/post/1735800
# https://gloriajun.github.io/devops/2017/12/20/docker-mongodb.html
# https://docs.docker.com/compose/compose-file/#volumes
version: '3.2'

services:
  nginx:
    container_name: Nginx
    restart: always
    build: 
      context: ./docker/Nginx
      dockerfile: Dockerfile
    ports:
      - 80:80
      - 443:443
    volumes:
      - /workspace:/mnt/workspace
      - /workspace/node.js-common/docker/Nginx/nginx.conf:/etc/nginx/nginx.conf
      - /workspace/node.js-common/docker/Nginx/conf.d:/etc/nginx/conf.d
      - /workspace/node.js-common/docker/Nginx/keys:/etc/nginx/keys
    networks:
      - backend
    links:
      - laravel
      - examnode
      - mongo-express
    depends_on:
      - laravel
      - examnode
      - mongo-express

  redis:
    container_name: Redis
    restart: always
    build: 
      context: ./docker/Redis
      dockerfile: Dockerfile
    volumes:
      - /workspace:/mnt/workspace
      - /workspace/volumes/redis:/data/redis
      # - redisdata:/data/redis
    networks:
      - backend

  mongo:
    container_name: Mongo
    restart: always
    build: 
      context: ./docker/MongoDB
      dockerfile: Dockerfile
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      # auth: 
      # bind_ip: 0.0.0.0
    volumes:
      - /workspace:/mnt/workspace
      # - /workspace/volumes/mongo:/data/db
      - mongodbdata:/data/db
    networks:
      - backend

  # https://docs.docker.com/samples/library/mongo-express
  mongo-express:
    container_name: Mongo-Express
    restart: always
    build: 
      context: ./docker/Mongo-Express
      dockerfile: Dockerfile
    environment:
      ME_CONFIG_MONGODB_SERVER: mongo
      ME_CONFIG_MONGODB_PORT: 27017
      ME_CONFIG_OPTIONS_EDITORTHEME: ambiance
      ME_CONFIG_MONGODB_ENABLE_ADMIN: "true"
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
    volumes:
      - /workspace:/mnt/workspace
    links:
      - mongo
    depends_on:
      - mongo
    networks:
      - backend

  laravel:
    container_name: "DYM-5"
    restart: always
    build:
      context: ./Application/laravel/Laradock
      dockerfile: Dockerfile
      args:
        LARADOCK_PHP_VERSION: "7.0"
        INSTALL_ZIP_ARCHIVE: "true"
        INSTALL_PHPREDIS: "true"
        INSTALL_MYSQLI: "true"
        INSTALL_INTL: "true"
    volumes:
      - /workspace:/mnt/workspace
      - /workspace/laravel:/var/www
      - /workspace/node.js-common/docker/Application/laravel/Laradock/xdebug.ini:/usr/local/etc/php/conf.d/xdebug.ini
      - /workspace/node.js-common/docker/Application/laravel/Laradock/opcache.ini:/usr/local/etc/php/conf.d/opcache.ini
      - /workspace/node.js-common/docker/Application/laravel/Laradock/laravel.ini:/usr/local/etc/php/conf.d/laravel.ini
      - /workspace/node.js-common/docker/Application/laravel/Laradock/xlaravel.pool.conf:/usr/local/etc/php-fpm.d/xlaravel.pool.conf
    networks:
      - backend

  examnode:
    container_name: examnode
    restart: always
    build:
      context: ./docker/Application/examnode/Node.JS # node:10.8.0
      # context: ./docker/Application/examnode/CentOS # centos:7.5.1804 + node:10.8.0
      dockerfile: Dockerfile
    volumes:
      - /workspace:/mnt/workspace
    networks:
      - backend
    links:
      - mongo
      - redis
    depends_on:
      - mongo
      - redis

networks:
  # frontend:
  #   driver: bridge
  backend:
    driver: bridge

volumes:
  mongodbdata:
    driver: local
  redisdata:
    driver: local